
bisect
  O(log(N))でソートされた配列にある要素を挿入できる位置を取得

  bisect_right(a,x)
  bisect_left(a,x)

set
  重複を削除した上で最小値をO(1)で取得、要素の挿入はO(log(N))

defaultdict
  初期値つき辞書

隣接行列
  二つの頂点間の辺の存在確認が容易

隣接リスト
  辿るときに便利

sorted
  リストをO(Nlog(N))でソート
  a = sorted(a, key=lambda x: x[0])
  // キーの指定

reversed
  リストを逆順に、返り値はリストじゃない

collectionsについて
  https://qiita.com/bee2/items/4ab87d05cc03d53e19f9

heapq
  最小値の取り出し、要素の挿入がともにO(log(N))
  https://qiita.com/ell/items/fe52a9eb9499b7060ed6

  import heapq
  heap = []
  heapq.heappush(heap, 1)
  heapq.heappop(heap)

ord
  ascii -> 数値

chr
  数値 -> ascii

bit全探索
  シフト演算子 i >> j (iをjビット右にシフト)を使う

二分探索
  最大値の最小化や最小値の最大化などに使える

Unionfind
  素集合を同じ根に属しているかで管理
  分離はできない

ワーシャルフロイド法
  最短経路を始点、中継点、終点の三重ループで求める
  グラフの動的計画法

再帰の上限回数変更
  import sys
  sys.setrecursionlimit(1000000)

suffix array
  文字列の始点を変えたときの辞書順

convex hull trick
  複数の直線を追加し、その後 Q 個の x 座標での最大値を答える場合
  https://tjkendev.github.io/procon-library/python/convex_hull_trick/deque.html



余事象
逆からやってみる
（場合の数問題で）小さいとこから構成していく
i番目をiだけシフト
サンプルで流れを確認
制約をよく読む
小さい具体例で試しつつ法則を見つける
わからなければコピペでいい
x の部分集合をは i = x からスタートして (i-1) & x を i = 0 となるまですることでできる
3つの問題は真ん中に注目してみる
2分探索、3分探索などはできるだけ小さく近づけていく
heapq の要素の削除は取り出すときにすれば問題ないことがある
*** 基本は無駄な部分、数えなくていい部分の削減 -> 条件の整理が必要不可欠 ***
l~r を求める問題は (1~r) - (1~l-1) で求められる
k = 1,2,3, ... について求める問題は両端から計算した結果を持っておくと線形時間で解決可能
期待値について E(X=i) = sigma P(X>=i)
答えの数値で二分探索のときがある
期待値や個数を数える際、要素一つずつに注目すると対称性が使えるかも
ハニカム構造の距離に対しては (x, y) -> (x, y, x-y) の座標変換が有効
超頂点
OEIS
最小全域木はソート済み辺集合と Unionfind を使って実装可能
総和の比の最大値・最小値は二分探索の判定問題にすると各比ごとに分離可能
O(sqrt(m)) もありえるから考えてみる
rootと自分の間の任意の距離の頂点はDFSしながら末尾を追加・削除することで得られる
クエリ先読み
すごろく系はゴールから計算
問題文誤読の可能性
転倒数の計算には左側の集合がわかっていればよい
グラフに適当な頂点を足すことを考えると、辺の数を減らせるかも（超頂点もこの一種）
45度回転の本質は軸ごとのインクリメント、デクリメント処理の合成、分解？
python のソート時に比較関数を渡せる(from functools import cmp_to_key)
フェルマーの小定理の一般化 -> オイラーの定理
LCAを求めるときはオイラーツアー（DFSの順に深さと頂点番号を管理する）をして初出の区間のminをとる
行きがけ順を記録すると逆から見るだけで帰りがけ順になる
モノイドが交換法則を満たしているかどうかの確認は大事
中央値は二分探索を考えると値の持ち方が楽になる
思いついた解法に固執しすぎない
最小値の最大化は二分探索の決め打ちでいけるときがある
二分探索の決めうちの本質は判定問題への分離
  -> 総和の比：各要素の比の話に持っていける
  -> 最大値の最小化：「どちらか」ではなく「どっちも」の話に持っていける
  -> 中央値：上部分の個数の話に持っていける
部分列DP：部分列を重複なく数えるDP、最後に使う文字を保持して直近の同じ文字から遷移をスタートする
重複を除いた部分列の個数はsuffix_arrayを使うとO(len(s))で求められるっぽい
mod P では任意の数が原始根の冪乗で表せる
幾何問題で図形がかなり自由に動く場合は、いくつかピンを刺して端っこまで引っ張る
N=15 くらいなら O(3^N) が通り、これは各 2^N 通りの集合の部分集合を走査する時の計算量である
部分集合の条件のもとで、演算をするときは高速ゼータ変換 O(N*2^N) -> 各 (i: N, j: 2^N) の遷移において、j の下 i 桁
xor 基底を考える
組(i, j)を両方昇順に並べるとき、(i, -j)をソートしてからLIS
行きがけ順で処理をするとき、各辺に対する操作が必要なら再帰で実装した方がいい


